{"version":3,"sources":["components/PopularMovies/index.js","components/GlobalNavbar/index.js","components/MovieCard/index.js","components/Pages/index.js","components/TopRatedMovies/index.js","components/UpcomingMovies/index.js","components/CastDetails/index.js","components/SingleMovieDetails/index.js","components/SearchedMovies/index.js","App.js","index.js"],"names":["GlobalNavbar","props","searchValue","updateSearchValue","_jsxs","className","children","_jsx","Link","to","type","onChange","event","placeholder","value","MoviesCard","movieDetails","title","voteAverage","posterPath","id","src","concat","alt","Pages","pageNo","updatedPageNo","activePage","no","onClick","apiStatusConstants","listpages","i","push","PopularMovies","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","state","apiStatus","popularMoviesData","totalPages","pagesList","getpopularMoviesData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","results","updatedData","wrap","_context","prev","next","setState","fetch","sent","json","ok","map","eachItem","adult","backdropPath","backdrop_path","genreIds","genre_ids","originalLanguage","original_language","originalTitle","original_title","overview","popularity","poster_path","releaseDate","release_date","video","vote_average","voteCount","vote_count","total_pages","stop","goToPrevPage","_this$state","list","prevState","goToNextPage","_this$state2","renderLoadingView","Loader","color","height","width","renderSuccessView","_this$state3","_Fragment","MovieCard","_createClass","key","this","Component","TopRatedMovies","topRatedMoviesData","getTopRatedMoviesData","UpcomingMovies","upcomingMoviesData","getUpcomingMoviesData","CastDetails","castDetails","name","profilePath","character","SingleMovieDetails","movieData","castData","getmovieData","match","params","genres","eachValue","runtime","getCastData","_callee2","cast","_context2","profile_path","SearchedMovies","searchedMoviesData","getSearchedMoviesData","console","log","App","target","Switch","Route","exact","path","component","render","_objectSpread","ReactDOM","React","StrictMode","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.c5f7536d.chunk.js","sourcesContent":["import {Component} from 'react'\nimport Loader from 'react-loader-spinner'\n\nimport MovieCard from '../MovieCard'\nimport Pages from '../Pages'\n\nimport './index.css'\n\nconst apiStatusConstants = {\n  success: 'SUCCESS',\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n}\n\nconst listpages = []\nfor (let i = 1; i <= 20; i += 1) {\n  listpages.push(i)\n}\n\nclass PopularMovies extends Component {\n  state = {\n    apiStatus: apiStatusConstants.initial,\n    popularMoviesData: [],\n    pageNo: 1,\n    totalPages: 0,\n    pagesList: listpages,\n  }\n\n  componentDidMount() {\n    this.getpopularMoviesData()\n  }\n\n  getpopularMoviesData = async () => {\n    const {pageNo} = this.state\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/popular?api_key=4b6447742932745f75f6186d51933b0b&language=en-US&page=${pageNo}`,\n    )\n    const data = await response.json()\n    if (response.ok) {\n      const {results} = data\n      const updatedData = results.map(eachItem => ({\n        adult: eachItem.adult,\n        backdropPath: eachItem.backdrop_path,\n        genreIds: eachItem.genre_ids,\n        id: eachItem.id,\n        originalLanguage: eachItem.original_language,\n        originalTitle: eachItem.original_title,\n        overview: eachItem.overview,\n        popularity: eachItem.popularity,\n        posterPath: eachItem.poster_path,\n        releaseDate: eachItem.release_date,\n        title: eachItem.title,\n        video: eachItem.video,\n        voteAverage: eachItem.vote_average,\n        voteCount: eachItem.vote_count,\n      }))\n\n      let totalPages = data.total_pages\n      if (totalPages > 500) {\n        totalPages = 500\n      }\n\n      this.setState({\n        apiStatus: apiStatusConstants.success,\n        popularMoviesData: updatedData,\n        totalPages,\n      })\n    }\n  }\n\n  updatedPageNo = no => {\n    this.setState({pageNo: no}, this.getpopularMoviesData)\n  }\n\n  goToPrevPage = () => {\n    const {totalPages, pagesList, pageNo} = this.state\n    if (pageNo < totalPages && pageNo > 1) {\n      if (pagesList[0] === pageNo) {\n        const list = []\n        for (let i = pageNo - 20; i <= pageNo - 1; i += 1) {\n          list.push(i)\n        }\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo - 1,\n            pagesList: list,\n          }),\n          this.getpopularMoviesData,\n        )\n      } else {\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo - 1,\n          }),\n          this.getpopularMoviesData,\n        )\n      }\n    }\n  }\n\n  goToNextPage = () => {\n    const {totalPages, pagesList, pageNo} = this.state\n    if (pageNo < totalPages) {\n      if (pagesList[pagesList.length - 1] === pageNo) {\n        const list = []\n        for (let i = pageNo + 1; i <= pageNo + 20; i += 1) {\n          list.push(i)\n        }\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo + 1,\n            pagesList: list,\n          }),\n          this.getpopularMoviesData,\n        )\n      } else {\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo + 1,\n          }),\n          this.getpopularMoviesData,\n        )\n      }\n    }\n  }\n\n  renderLoadingView = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"ThreeDots\" color=\"#00306e\" height=\"50\" width=\"50\" />\n    </div>\n  )\n\n  renderSuccessView = () => {\n    const {popularMoviesData, pagesList, pageNo} = this.state\n\n    return (\n      <>\n        <h1 className=\"title\">Popular Movies</h1>\n        <ul className=\"popular-list-container\">\n          {popularMoviesData.map(eachItem => (\n            <MovieCard key={eachItem.id} movieDetails={eachItem} />\n          ))}\n        </ul>\n        <ul className=\"pages-list-container\">\n          <li>\n            <button\n              onClick={this.goToPrevPage}\n              type=\"button\"\n              className=\"custom-button\"\n            >\n              Prev\n            </button>\n          </li>\n          {pagesList.map(eachItem => (\n            <Pages\n              key={eachItem}\n              pageNo={eachItem}\n              no={pageNo}\n              updatedPageNo={this.updatedPageNo}\n            />\n          ))}\n          <li>\n            <button\n              onClick={this.goToNextPage}\n              type=\"button\"\n              className=\"custom-button\"\n            >\n              Next\n            </button>\n          </li>\n        </ul>\n      </>\n    )\n  }\n\n  render() {\n    const {apiStatus} = this.state\n    switch (apiStatus) {\n      case 'SUCCESS':\n        return this.renderSuccessView()\n      default:\n        return this.renderLoadingView()\n    }\n  }\n}\n\nexport default PopularMovies\n","import {Link} from 'react-router-dom'\n\nimport './index.css'\n\nconst GlobalNavbar = props => {\n  const {searchValue, updateSearchValue} = props\n  const onChangeSearchValue = event => {\n    updateSearchValue(event)\n  }\n\n  return (\n    <nav className=\"header-container\">\n      <h1 className=\"logo-title\">movieDB</h1>\n      <ul className=\"nav-list-container\">\n        <Link to=\"/\" className=\"link-container\">\n          <li>\n            <h1 type=\"button\" className=\"nav-items\">\n              Popular\n            </h1>\n          </li>\n        </Link>\n        <Link to=\"/top-rated\" className=\"link-container\">\n          <li>\n            <h1 type=\"button\" className=\"nav-items\">\n              Top Rated\n            </h1>\n          </li>\n        </Link>\n        <Link to=\"/upcoming\" className=\"link-container\">\n          <li>\n            <h1 type=\"button\" className=\"nav-items\">\n              Upcoming\n            </h1>\n          </li>\n        </Link>\n      </ul>\n      <div className=\"search-container\">\n        <Link to=\"/\">\n          <input\n            onChange={onChangeSearchValue}\n            type=\"search\"\n            placeholder=\"Enter Movie Name\"\n            value={searchValue}\n            className=\"search-input\"\n          />\n        </Link>\n        <Link to=\"/searched-movies\">\n          <button type=\"button\" className=\"search-button\">\n            Search\n          </button>\n        </Link>\n      </div>\n    </nav>\n  )\n}\n\nexport default GlobalNavbar\n","import {Link} from 'react-router-dom'\n\nimport './index.css'\n\nconst MoviesCard = props => {\n  const {movieDetails} = props\n  const {title, voteAverage, posterPath, id} = movieDetails\n\n  return (\n    <li className=\"movie-card-item\">\n      <img\n        className=\"movie-image\"\n        src={`https://image.tmdb.org/t/p/w500/${posterPath}`}\n        alt={title}\n      />\n      <div className=\"details-container\">\n        <h1 className=\"movie-title\">{title}</h1>\n        <p className=\"movie-rating\">Ratings: {voteAverage}</p>\n        <Link to={`/movie-details/${id}`}>\n          <button type=\"button\" className=\"view-details-button\">\n            View Details\n          </button>\n        </Link>\n      </div>\n    </li>\n  )\n}\n\nexport default MoviesCard\n","import './index.css'\n\nconst Pages = props => {\n  const {pageNo, updatedPageNo, no} = props\n\n  const onClickButton = () => {\n    updatedPageNo(pageNo)\n  }\n\n  const activePage = no === pageNo ? 'active-bg' : ''\n\n  return (\n    <li className=\"page-item\">\n      <button\n        onClick={onClickButton}\n        type=\"button\"\n        className={`page-button ${activePage}`}\n      >\n        {pageNo}\n      </button>\n    </li>\n  )\n}\n\nexport default Pages\n","import {Component} from 'react'\nimport Loader from 'react-loader-spinner'\n\nimport MovieCard from '../MovieCard'\nimport Pages from '../Pages'\n\nimport './index.css'\n\nconst apiStatusConstants = {\n  success: 'SUCCESS',\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n}\n\nconst listpages = []\nfor (let i = 1; i <= 20; i += 1) {\n  listpages.push(i)\n}\n\nclass TopRatedMovies extends Component {\n  state = {\n    apiStatus: apiStatusConstants.initial,\n    topRatedMoviesData: [],\n    pageNo: 1,\n    totalPages: 0,\n    pagesList: listpages,\n  }\n\n  componentDidMount() {\n    this.getTopRatedMoviesData()\n  }\n\n  getTopRatedMoviesData = async () => {\n    const {pageNo} = this.state\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/top_rated?api_key=4b6447742932745f75f6186d51933b0b&language=en-US&page=${pageNo}`,\n    )\n    const data = await response.json()\n    if (response.ok) {\n      const {results} = data\n      const updatedData = results.map(eachItem => ({\n        adult: eachItem.adult,\n        backdropPath: eachItem.backdrop_path,\n        genreIds: eachItem.genre_ids,\n        id: eachItem.id,\n        originalLanguage: eachItem.original_language,\n        originalTitle: eachItem.original_title,\n        overview: eachItem.overview,\n        popularity: eachItem.popularity,\n        posterPath: eachItem.poster_path,\n        releaseDate: eachItem.release_date,\n        title: eachItem.title,\n        video: eachItem.video,\n        voteAverage: eachItem.vote_average,\n        voteCount: eachItem.vote_count,\n      }))\n\n      let totalPages = data.total_pages\n      if (totalPages > 500) {\n        totalPages = 500\n      }\n\n      this.setState({\n        apiStatus: apiStatusConstants.success,\n        topRatedMoviesData: updatedData,\n        totalPages,\n      })\n    }\n  }\n\n  updatedPageNo = no => {\n    this.setState({pageNo: no}, this.getTopRatedMoviesData)\n  }\n\n  goToPrevPage = () => {\n    const {totalPages, pagesList, pageNo} = this.state\n    if (pageNo < totalPages && pageNo > 1) {\n      if (pagesList[0] === pageNo) {\n        const list = []\n        for (let i = pageNo - 20; i <= pageNo - 1; i += 1) {\n          list.push(i)\n        }\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo - 1,\n            pagesList: list,\n          }),\n          this.getTopRatedMoviesData,\n        )\n      } else {\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo - 1,\n          }),\n          this.getTopRatedMoviesData,\n        )\n      }\n    }\n  }\n\n  goToNextPage = () => {\n    const {totalPages, pagesList, pageNo} = this.state\n    if (pageNo < totalPages) {\n      if (pagesList[pagesList.length - 1] === pageNo) {\n        const list = []\n        for (let i = pageNo + 1; i <= pageNo + 20; i += 1) {\n          list.push(i)\n        }\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo + 1,\n            pagesList: list,\n          }),\n          this.getTopRatedMoviesData,\n        )\n      } else {\n        this.setState(\n          prevState => ({\n            pageNo: prevState.pageNo + 1,\n          }),\n          this.getTopRatedMoviesData,\n        )\n      }\n    }\n  }\n\n  renderLoadingView = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"ThreeDots\" color=\"#00306e\" height=\"50\" width=\"50\" />\n    </div>\n  )\n\n  renderSuccessView = () => {\n    const {topRatedMoviesData, pagesList, pageNo} = this.state\n\n    return (\n      <>\n        <h1 className=\"title\">Top Rated Movies</h1>\n        <ul className=\"top-list-container\">\n          {topRatedMoviesData.map(eachItem => (\n            <MovieCard key={eachItem.id} movieDetails={eachItem} />\n          ))}\n        </ul>\n        <ul className=\"pages-list-container\">\n          <li>\n            <button\n              onClick={this.goToPrevPage}\n              type=\"button\"\n              className=\"custom-button\"\n            >\n              Prev\n            </button>\n          </li>\n          {pagesList.map(eachItem => (\n            <Pages\n              key={eachItem}\n              pageNo={eachItem}\n              no={pageNo}\n              updatedPageNo={this.updatedPageNo}\n            />\n          ))}\n          <li>\n            <button\n              onClick={this.goToNextPage}\n              type=\"button\"\n              className=\"custom-button\"\n            >\n              Next\n            </button>\n          </li>\n        </ul>\n      </>\n    )\n  }\n\n  render() {\n    const {apiStatus} = this.state\n    switch (apiStatus) {\n      case 'SUCCESS':\n        return this.renderSuccessView()\n      default:\n        return this.renderLoadingView()\n    }\n  }\n}\n\nexport default TopRatedMovies\n","import {Component} from 'react'\nimport Loader from 'react-loader-spinner'\n\nimport MovieCard from '../MovieCard'\nimport Pages from '../Pages'\n\nimport './index.css'\n\nconst apiStatusConstants = {\n  success: 'SUCCESS',\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n}\n\nconst listpages = []\nfor (let i = 1; i <= 29; i += 1) {\n  listpages.push(i)\n}\n\nclass UpcomingMovies extends Component {\n  state = {\n    apiStatus: apiStatusConstants.initial,\n    upcomingMoviesData: [],\n    pageNo: 1,\n    totalPages: 0,\n    pagesList: listpages,\n  }\n\n  componentDidMount() {\n    this.getUpcomingMoviesData()\n  }\n\n  getUpcomingMoviesData = async () => {\n    const {pageNo} = this.state\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/upcoming?api_key=4b6447742932745f75f6186d51933b0b&language=en-US&page=${pageNo}`,\n    )\n    const data = await response.json()\n    if (response.ok) {\n      const {results} = data\n      const updatedData = results.map(eachItem => ({\n        adult: eachItem.adult,\n        backdropPath: eachItem.backdrop_path,\n        genreIds: eachItem.genre_ids,\n        id: eachItem.id,\n        originalLanguage: eachItem.original_language,\n        originalTitle: eachItem.original_title,\n        overview: eachItem.overview,\n        popularity: eachItem.popularity,\n        posterPath: eachItem.poster_path,\n        releaseDate: eachItem.release_date,\n        title: eachItem.title,\n        video: eachItem.video,\n        voteAverage: eachItem.vote_average,\n        voteCount: eachItem.vote_count,\n      }))\n\n      let totalPages = data.total_pages\n      if (totalPages > 500) {\n        totalPages = 500\n      }\n\n      this.setState({\n        apiStatus: apiStatusConstants.success,\n        upcomingMoviesData: updatedData,\n        totalPages,\n      })\n    }\n  }\n\n  updatedPageNo = no => {\n    this.setState({pageNo: no}, this.getUpcomingMoviesData)\n  }\n\n  goToPrevPage = () => {\n    const {totalPages, pageNo} = this.state\n    if (pageNo < totalPages && pageNo > 1) {\n      this.setState(\n        prevState => ({\n          pageNo: prevState.pageNo - 1,\n        }),\n        this.getUpcomingMoviesData,\n      )\n    }\n  }\n\n  goToNextPage = () => {\n    const {totalPages, pageNo} = this.state\n    if (pageNo < totalPages) {\n      this.setState(\n        prevState => ({\n          pageNo: prevState.pageNo + 1,\n        }),\n        this.getUpcomingMoviesData,\n      )\n    }\n  }\n\n  renderLoadingView = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"ThreeDots\" color=\"#00306e\" height=\"50\" width=\"50\" />\n    </div>\n  )\n\n  renderSuccessView = () => {\n    const {upcomingMoviesData, pagesList, pageNo} = this.state\n\n    return (\n      <>\n        <h1 className=\"title\">Upcoming Movies</h1>\n        <ul className=\"upcoming-list-container\">\n          {upcomingMoviesData.map(eachItem => (\n            <MovieCard key={eachItem.id} movieDetails={eachItem} />\n          ))}\n        </ul>\n        <ul className=\"pages-list-container\">\n          <li>\n            <button\n              onClick={this.goToPrevPage}\n              type=\"button\"\n              className=\"custom-button\"\n            >\n              Prev\n            </button>\n          </li>\n          {pagesList.map(eachItem => (\n            <Pages\n              key={eachItem}\n              pageNo={eachItem}\n              no={pageNo}\n              updatedPageNo={this.updatedPageNo}\n            />\n          ))}\n          <li>\n            <button\n              onClick={this.goToNextPage}\n              type=\"button\"\n              className=\"custom-button\"\n            >\n              Next\n            </button>\n          </li>\n        </ul>\n      </>\n    )\n  }\n\n  render() {\n    const {apiStatus} = this.state\n    switch (apiStatus) {\n      case 'SUCCESS':\n        return this.renderSuccessView()\n      default:\n        return this.renderLoadingView()\n    }\n  }\n}\n\nexport default UpcomingMovies\n","import './index.css'\n\nconst CastDetails = props => {\n  const {castDetails} = props\n  const {name, profilePath, character} = castDetails\n  return (\n    <li className=\"cast-item-container\">\n      <h1 className=\"cast-name\">{name}</h1>\n      <img\n        className=\"cast-image\"\n        src={`https://image.tmdb.org/t/p/w500/${profilePath}`}\n        alt=\"cast\"\n      />\n      <p className=\"cast-para\">\n        Character: <span className=\"char\">{character}</span>\n      </p>\n    </li>\n  )\n}\n\nexport default CastDetails\n","import {Component} from 'react'\nimport Loader from 'react-loader-spinner'\n\nimport CastDetails from '../CastDetails'\n\nimport './index.css'\n\nconst apiStatusConstants = {\n  success: 'SUCCESS',\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n}\n\nclass SingleMovieDetails extends Component {\n  state = {apiStatus: apiStatusConstants.initial, movieData: {}, castData: []}\n\n  componentDidMount() {\n    this.getmovieData()\n    this.getCastData()\n  }\n\n  getmovieData = async () => {\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const {match} = this.props\n    const {params} = match\n    const {id} = params\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=4b6447742932745f75f6186d51933b0b&language=en-US`,\n    )\n    const data = await response.json()\n    if (response.ok) {\n      const updatedData = {\n        genres: data.genres.map(eachValue => ({\n          id: eachValue.id,\n          name: eachValue.name,\n        })),\n        id: data.id,\n        overview: data.overview,\n        posterPath: data.poster_path,\n        releaseDate: data.release_date,\n        runtime: data.runtime,\n        title: data.title,\n        voteAverage: data.vote_average,\n      }\n\n      this.setState({\n        apiStatus: apiStatusConstants.success,\n        movieData: updatedData,\n      })\n    }\n  }\n\n  getCastData = async () => {\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const {match} = this.props\n    const {params} = match\n    const {id} = params\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=4b6447742932745f75f6186d51933b0b&language=en-US`,\n    )\n    const data = await response.json()\n    if (response.ok) {\n      const {cast} = data\n      const updatedData = cast.map(eachItem => ({\n        id: eachItem.id,\n        name: eachItem.name,\n        profilePath: eachItem.profile_path,\n        character: eachItem.character,\n      }))\n\n      this.setState({\n        apiStatus: apiStatusConstants.success,\n        castData: updatedData,\n      })\n    }\n  }\n\n  renderLoadingView = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"ThreeDots\" color=\"#00306e\" height=\"50\" width=\"50\" />\n    </div>\n  )\n\n  renderSuccessView = () => {\n    const {movieData, castData} = this.state\n    const {\n      genres,\n      overview,\n      posterPath,\n      releaseDate,\n      runtime,\n      title,\n      voteAverage,\n    } = movieData\n\n    return (\n      <>\n        <div className=\"mv-details-container\">\n          <h1 className=\"mv-title\">{title}</h1>\n          <img\n            className=\"mv-image\"\n            src={`https://image.tmdb.org/t/p/w500/${posterPath}`}\n            alt={title}\n          />\n          <div className=\"mv-details\">\n            <p className=\"para\">\n              Release Date: <span className=\"mv-color\">{releaseDate}</span>\n            </p>\n            <p className=\"para\">\n              Duration: <span className=\"mv-color\">{runtime}min</span>\n            </p>\n            <p className=\"para\">\n              Ratings: <span className=\"mv-color\">{voteAverage}</span>\n            </p>\n          </div>\n          <h1 className=\"mv-title\">Genres</h1>\n          <ul className=\"mv-genres\">\n            {genres.map(eachItem => (\n              <li key={eachItem.id} className=\"para\">\n                {eachItem.name}\n              </li>\n            ))}\n          </ul>\n          <h1 className=\"mv-title\">OverView</h1>\n          <p className=\"mv-overview\">{overview}</p>\n        </div>\n        <div className=\"cast-details-container\">\n          <hr />\n          <h1 className=\"mv-title\">Cast Details</h1>\n          <ul className=\"cast-list-container\">\n            {castData.map(eachItem => (\n              <CastDetails key={eachItem.id} castDetails={eachItem} />\n            ))}\n          </ul>\n        </div>\n      </>\n    )\n  }\n\n  render() {\n    const {apiStatus} = this.state\n    switch (apiStatus) {\n      case 'SUCCESS':\n        return this.renderSuccessView()\n      default:\n        return this.renderLoadingView()\n    }\n  }\n}\n\nexport default SingleMovieDetails\n","import {Component} from 'react'\nimport Loader from 'react-loader-spinner'\n\nimport MovieCard from '../MovieCard'\n\nimport './index.css'\n\nconst apiStatusConstants = {\n  success: 'SUCCESS',\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n}\n\nclass SearchedMovies extends Component {\n  state = {apiStatus: apiStatusConstants.initial, searchedMoviesData: []}\n\n  componentDidMount() {\n    this.getSearchedMoviesData()\n  }\n\n  getSearchedMoviesData = async () => {\n    this.setState({apiStatus: apiStatusConstants.inProgress})\n    const {searchValue} = this.props\n    console.log(searchValue)\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=4b6447742932745f75f6186d51933b0b&language=en-US&query=${searchValue}&page=1`,\n    )\n    const data = await response.json()\n    if (response.ok) {\n      const {results} = data\n      const updatedData = results.map(eachItem => ({\n        adult: eachItem.adult,\n        backdropPath: eachItem.backdrop_path,\n        genreIds: eachItem.genre_ids,\n        id: eachItem.id,\n        originalLanguage: eachItem.original_language,\n        originalTitle: eachItem.original_title,\n        overview: eachItem.overview,\n        popularity: eachItem.popularity,\n        posterPath: eachItem.poster_path,\n        releaseDate: eachItem.release_date,\n        title: eachItem.title,\n        video: eachItem.video,\n        voteAverage: eachItem.vote_average,\n        voteCount: eachItem.vote_count,\n      }))\n\n      this.setState({\n        apiStatus: apiStatusConstants.success,\n        searchedMoviesData: updatedData,\n      })\n    }\n  }\n\n  renderLoadingView = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"ThreeDots\" color=\"#00306e\" height=\"50\" width=\"50\" />\n    </div>\n  )\n\n  renderSuccessView = () => {\n    const {searchedMoviesData} = this.state\n\n    return (\n      <>\n        <h1 className=\"title\">Searched Movies</h1>\n        <ul className=\"searched-list-container\">\n          {searchedMoviesData.map(eachItem => (\n            <MovieCard key={eachItem.id} movieDetails={eachItem} />\n          ))}\n        </ul>\n      </>\n    )\n  }\n\n  render() {\n    const {apiStatus} = this.state\n\n    switch (apiStatus) {\n      case 'SUCCESS':\n        return this.renderSuccessView()\n      default:\n        return this.renderLoadingView()\n    }\n  }\n}\n\nexport default SearchedMovies\n","import {Component} from 'react'\nimport {Route, Switch} from 'react-router-dom'\n\nimport GlobalNavbar from './components/GlobalNavbar'\nimport PopularMovies from './components/PopularMovies'\nimport TopRatedMovies from './components/TopRatedMovies'\nimport UpcomingMovies from './components/UpcomingMovies'\nimport SingleMovieDetails from './components/SingleMovieDetails'\nimport SearchedMovies from './components/SearchedMovies'\n\nimport './App.css'\n\nclass App extends Component {\n  state = {searchValue: ''}\n\n  updateSearchValue = event => {\n    this.setState({searchValue: event.target.value})\n  }\n\n  render() {\n    const {searchValue} = this.state\n    return (\n      <>\n        <GlobalNavbar\n          searchValue={searchValue}\n          updateSearchValue={this.updateSearchValue}\n        />\n        <Switch>\n          <Route exact path=\"/\" component={PopularMovies} />\n          <Route exact path=\"/top-rated\" component={TopRatedMovies} />\n          <Route exact path=\"/upcoming\" component={UpcomingMovies} />\n          <Route\n            exact\n            path=\"/movie-details/:id\"\n            component={SingleMovieDetails}\n          />\n          <Route\n            exact\n            path=\"/searched-movies\"\n            render={props => (\n              <SearchedMovies {...props} searchValue={searchValue} />\n            )}\n          />\n        </Switch>\n      </>\n    )\n  }\n}\n\nexport default App\n","import {BrowserRouter} from 'react-router-dom'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}